AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create an EKS cluster. You can customize the WebappRunnerRole or add more roles. Just make sure to have a PodIdentity Association for each role.

Parameters:
  KubernetesClusterName:
      Type: String
      Description: The name of the Kubernetes cluster to add the node group to

Resources:
  ClusterAutoscalerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: pods.eks.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:TagSession
      Policies:
        - PolicyName: ClusterAutoscalerRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:DescribeLaunchConfigurations
                  - autoscaling:DescribeScalingActivities
                  - ec2:DescribeImages
                  - ec2:DescribeInstanceTypes
                  - ec2:DescribeLaunchTemplateVersions
                  - ec2:GetInstanceTypesFromInstanceRequirements
                  - eks:DescribeNodegroup
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - autoscaling:SetDesiredCapacity
                  - autoscaling:TerminateInstanceInAutoScalingGroup
                Resource:
                  - '*'
  ClusterAutoscalerPodIdentityAssociation:
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ClusterName: !Ref KubernetesClusterName
      Namespace: cluster-autoscaler-namespace
      ServiceAccount: cluster-autoscaler-service-account
      RoleArn: !GetAtt ClusterAutoscalerRole.Arn
  WebappRunnerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: pods.eks.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:TagSession
      Policies:
        - PolicyName: WebappRunnerRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - s3:*
                  - cognito:*
                  - dynamodb:*
                  - ecs:RunTask
                  - sns:Publish
                  - ses:SendEmail
                  - ses:SendRawEmail
                  - cloudformation:ListStacks
                  - cloudformation:DescribeStacks
                Resource: '*'
  WebappPodIdentityAssociation:
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ClusterName: !Ref KubernetesClusterName
      Namespace: webapp-namespace
      ServiceAccount: webapp-service-account
      RoleArn: !GetAtt WebappRunnerRole.Arn

Outputs:
  ClusterAutoscalerRoleArn:
    Value: !GetAtt ClusterAutoscalerRole.Arn
  WebappRunnerRoleArn:
    Value: !GetAtt WebappRunnerRole.Arn