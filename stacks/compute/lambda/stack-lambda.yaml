AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda scheduled every hour to clean up DynamoDB using resource API

Parameters:
  LambdaName:
    Type: String
    Default: DynamoDBCleanupFunction
    Description: Name of the lambda to create
  Schedule:
    Type: String
    Default: rate(1 hour)
    Description: 'The "cron" or "rate" at which the lambda gets trigerred. Leave an empty string for no auto-trigger.'

Conditions:
  IsScheduled: !Not [!Equals ['', !Ref Schedule]]

Resources:
  CleanupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBCleanupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:DescribeTable
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/throttle
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
  
  CleanupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/DynamoDBCleanupFunction"
      RetentionInDays: 30

  CleanupLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: CleanupLogGroup
    Properties:
      FunctionName: DynamoDBCleanupFunction
      Handler: index.handler
      Runtime: python3.12
      Role: !GetAtt CleanupFunctionRole.Arn
      Timeout: 300
      Environment:
        Variables:
          TABLE_NAME: throttle
      Code:
        ZipFile: |
          import os
          import boto3
          from zoneinfo import ZoneInfo
          from datetime import datetime, timedelta

          def handler(event, context):
              table_name = os.environ['TABLE_NAME']
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table(table_name)
              table_keys = {ks["KeyType"]: ks["AttributeName"] for ks in table.key_schema}
              timestamp = datetime.now(ZoneInfo('UTC')).isoformat()

              deleted = 0
              with table.batch_writer() as batch:
                  next_page_token = None
                  while True:
                      response = table.scan(Limit=1_000, **(dict(ExclusiveStartKey=next_page_token) if next_page_token else {}))
                      next_page_token = response.get("LastEvaluatedKey")
                      for item in response.get('Items', []):
                          # Replace this condition with your own cleanup logic
                          if item[table_keys["RANGE"]] <= timestamp:
                              batch.delete_item(Key={k: item[k] for k in table_keys.values()})
                              deleted += 1
                      if next_page_token is None:
                          break

              print(f"Deleted {deleted} items.")

  CleanupSchedule:
    Type: AWS::Events::Rule
    Condition: IsScheduled
    Properties:
      Name: HourlyCleanupTrigger
      ScheduleExpression: rate(1 hour)
      State: ENABLED
      Targets:
        - Arn: !GetAtt CleanupLambdaFunction.Arn
          Id: LambdaTarget

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: IsScheduled
    Properties:
      FunctionName: !Ref CleanupLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CleanupSchedule.Arn


Outputs:
  LambdaArn:
    Value: !GetAtt CleanupLambdaFunction.Arn
  LambdaName:
    Value: !Ref CleanupLambdaFunction