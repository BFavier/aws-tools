AWSTemplateFormatVersion: '2010-09-09'
Description: Defines a service that runs on an ECS cluster, with a load balancer in front

Parameters:
  DockerImage:
    Type: String
    Description: The address of the Docker image to use (busybox, python:3.12, public.ecr.aws/lambda/python:3.12, 717279735548.dkr.ecr.eu-west-3.amazonaws.com/sleek-simulations/webapp, ...)

  CompatibilityRequirements:
    Type: CommaDelimitedList
    Description: The type of clusters that the task should be compatible with. Might restrain the core/memory/disk space values that are valid.
    Default: EC2,FARGATE
  CpuUnits:
    Type: Number
    Description: CPU resources allocated to each docker container running the service (1024 CPU units = 1 cpu core)
    Default: '256'
  MemoryMiB:
    Type: Number
    Description: Memory resources allocated to each docker container running the service (in MiB)
    Default: '512'
  DiskSpaceGiB:
    Type: Number
    Description: Disk space in GiB
    Default: '21'
  EnvironmentFiles:
    Type: CommaDelimitedList
    Description: The s3 uri (s3://.../variables.env) of .env files containing env variables definitions. They must be read accessible from the runner role.
    Default: ''
  RunerRolePolicyArn:
    Type: String
    Description: The Arn of an AWS::IAM::ManagedPolicy object that will be used to create the role EC2 endorses. Or an empty string for default rights.
    Default: ''

Conditions:
  NotHasPolicy: !Equals ['', !Ref RunerRolePolicyArn]
  UseAWSVPCNetworkMode: !Or
    - !Equals [!Join [",", !Ref CompatibilityRequirements], 'FARGATE']
    - !Equals [!Join [",", !Ref CompatibilityRequirements], 'EC2,FARGATE']
    - !Equals [!Join [",", !Ref CompatibilityRequirements], 'FARGATE,EC2']

Resources:
  ExecutionRole:  # this is the role of the instance that execute the docker image, not the role endorsed from the docker image
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  DefaultRunnerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-DefaultRunnerPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Resource: "*"
  RunnerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-RunnerRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - !Ref DefaultRunnerPolicy
        - !If
          - NotHasPolicy
          - !Ref AWS::NoValue
          - !Ref RunerRolePolicyArn
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-TaskFamily
      ContainerDefinitions:
        - Name: TaskContainerName
          Image: !Ref DockerImage
          # EnvironmentFiles: #!Ref EnvironmentFiles
          Cpu: !Ref CpuUnits
          Memory: !Ref MemoryMiB
          Essential: true
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub ${AWS::StackName}-Task
      Cpu: !Ref CpuUnits
      Memory: !Ref MemoryMiB
      # EphemeralStorage:
      #   SizeInGiB: !Ref DiskSpaceGiB
      RequiresCompatibilities: !Ref CompatibilityRequirements
      NetworkMode: !If [ UseAWSVPCNetworkMode, awsvpc, host ]
      TaskRoleArn: !Ref RunnerRole
      ExecutionRoleArn: !Ref ExecutionRole
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}
      RetentionInDays: 30

Outputs:
  TaskDefinitionArn:
    Value: !Ref TaskDefinition