AWSTemplateFormatVersion: '2010-09-09'
Description: Defines a service that runs on an ECS cluster, with a load balancer in front

Parameters:
  VpcId:
    Type: String
    Description: ID of the VPC to start the instances in
  SubnetIds:
    Type: CommaDelimitedList
    Description: IDs of the subnets (in different availability zones of the same VPC) to scale the instances in
  ClusterType:
    Type: String
    Description: Type of ECS cluster to launch tasks on
    AllowedValues:
      - FARGATE
      - EC2

  InstanceType:
    Type: String
    Description: Instance Type
    Default: t2.micro
  InitialInstanceCount:
    Type: Number
    Description: Initial number of instances to boot up at stack deployment
    Default: '1'
  MinInstanceCount:
    Type: Number
    Description: Minimum number of instances that must booted up by the scaling policy
    Default: '1'
  MaxInstanceCount:
    Type: Number
    Description: Maximum number of instances that can be booted up by the scaling policy
    Default: '3'
  InstanceScalingCooldown:
    Type: Number
    Description: Number of seconds between an upward or a downward instances scaling adjustment
    Default: '300'
  SSHKeyName:
    Type: String
    Description: The name of an existing EC2 KeyPair to enable SSH access to the instances (optional). Leave empty to not use a key pair.
    Default: ''

Conditions:
  HasSSHKeyName: !Not [!Equals ['', !Ref SSHKeyName]]
  IsEc2Cluster: !Equals ['ec2', !Ref ClusterType]

Resources:
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Condition: IsEc2Cluster
    Properties:
      RoleName: !Sub ${AWS::StackName}-ECSInstanceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: IsEc2Cluster
    Properties:
      Roles:
        - !Ref ECSInstanceRole
  RunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsEc2Cluster
    Properties:
      GroupDescription: Security group for runners
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Fn::If:
          - HasSSHKeyName
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: IsEc2Cluster
    DependsOn: ECSCluster
    Properties:
      ImageId: '{{resolve:ssm:/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id}}'
      InstanceType: !Ref InstanceType
      KeyName: !If
        - HasSSHKeyName
        - !Ref SSHKeyName
        - !Ref AWS::NoValue
      SecurityGroups:
        - !Ref RunnerSecurityGroup
      IamInstanceProfile: !Ref ECSInstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: IsEc2Cluster
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref MinInstanceCount
      MaxSize: !Ref MaxInstanceCount
      DesiredCapacity: !Ref InitialInstanceCount
      VPCZoneIdentifier: !Ref SubnetIds
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - GroupDesiredCapacity
            - GroupInServiceInstances
            - GroupPendingInstances
            - GroupStandbyInstances
            - GroupTerminatingInstances
            - GroupTotalInstances
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AutoScalingGroup
          PropagateAtLaunch: true
  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Condition: IsEc2Cluster
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 80  # target of 80% of CPU usage
          InstanceWarmupPeriod: !Ref InstanceScalingCooldown
        ManagedTerminationProtection: DISABLED
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-ECSCluster
      CapacityProviders: !If
        - IsEc2Cluster
        - [!Ref CapacityProvider]
        - !Ref AWS::NoValue
      DefaultCapacityProviderStrategy: !If
        - IsEc2Cluster
        - 
          - CapacityProvider: !Ref CapacityProvider
            Weight: 1
        - !Ref AWS::NoValue

Outputs:
  ECSClusterName:
    Value: !Ref ECSCluster