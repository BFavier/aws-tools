AWSTemplateFormatVersion: '2010-09-09'
Description: Defines a route53 hosted zone and an eventual ACM certificate

Parameters:
  DomainName:
    Type: String
    Description: 'Domaine name of the website (ex: domain-name.com)'
    AllowedPattern: ^[a-z0-9-]+\.[a-z]{2,}$
    ConstraintDescription: Must be a valid domaine name

  VPCId:
    Type: String
    Description: Leave empty for a public hosted zone, provide a VPC ID to associate to for a private hosted zone.
    Default: ''

Conditions:
  IsPublicZone: !Equals [!Ref VPCId, '']

Resources:
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName
      VPCs: !If
        - IsPublicZone
        - !Ref AWS::NoValue
        - - VPCId: !Ref VPCId
            VPCRegion: !Ref AWS::Region
      HostedZoneTags:
        - Key: Name
          Value: !Sub ${DomainName}HostedZone
  NameServerChangeCustomResource:
    Type: Custom::NameServerChange
    Condition: IsPublicZone
    DependsOn: HostedZone
    Properties:
      ServiceToken: !GetAtt NameServerChangeLambda.Arn
      DomainName: !Ref DomainName
      HostedZoneId: !Ref HostedZone
  NameServerChangeLambda:
    Type: AWS::Lambda::Function
    Condition: IsPublicZone
    DependsOn: NameServerChangeLogGroup
    Properties:
      FunctionName: NameServerChangeLambda
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 600
      Code:
        ZipFile: |+
          import json
          import boto3
          import cfnresponse
          import traceback

          def handler(event, context):
              """
              This function is triggered by a CloudFormation custom resource.
              It updates the name servers of a domain in Route 53 to match those of the newly created hosted zone.
              """
              try:
                  domain_name = event['ResourceProperties']['DomainName']
                  hosted_zone_id = event['ResourceProperties']['HostedZoneId']

                  # Nothing to clean up if the resource is deleted
                  if event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  
                  route53 = boto3.client('route53')
                  domains = boto3.client('route53domains', region_name='us-east-1')  # global service, but must be acessed from us-east-1

                  # Check that the domain name exists
                  domain_list = domains.list_domains()['Domains']
                  registered_domains = [d['DomainName'].lower() for d in domain_list]
                  if domain_name.lower() in registered_domains:  # Update the name servers for the domain
                      response = route53.get_hosted_zone(Id=hosted_zone_id)
                      ns_list = response['DelegationSet']['NameServers']
                      ns_formatted = [{'Name': ns} for ns in ns_list]
                      domains.update_domain_nameservers(
                          DomainName=domain_name,
                          Nameservers=ns_formatted
                      )
                      print(f"Updated name servers for domain {domain_name} to {ns_list}.")
                  else:
                      print(f"Domain {domain_name} not registered in Route 53 Domains. Skipping update.")
                  physical_resource_id = domain_name + '|' + hosted_zone_id
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physical_resource_id)
          
              except Exception as e:
                  print(traceback.format_exc())
                  cfnresponse.send(event, context, cfnresponse.FAILED, {type(e).__name__: str(e)})
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: IsPublicZone
    Properties:
      RoleName: NameServerChangeLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: NameServerChangeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                  - route53:ChangeResourceRecordSets
                  - route53:ListHostedZones
                  - route53:ListResourceRecordSets
                  - route53:GetHostedZone
                  - route53domains:ListDomains
                  - route53domains:UpdateDomainNameservers
                Resource: '*'
  NameServerChangeLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsPublicZone
    Properties:
      LogGroupName: /aws/lambda/NameServerChangeLambda
      RetentionInDays: 30

Outputs:
  DomainName:
    Value: !Ref DomainName
  HostedZoneId:
    Value: !Ref HostedZone