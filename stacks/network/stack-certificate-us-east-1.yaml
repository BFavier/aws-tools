AWSTemplateFormatVersion: '2010-09-09'
Description: Defines an ACM certificate in the us-east-1 region specifically

Parameters:
  DomainName:
    Type: String
    Description: 'Domaine name of the website (ex: domain-name.com)'
    AllowedPattern: ^[a-z0-9-]+\.[a-z]{2,}$
    ConstraintDescription: Must be a valid domaine name
  HostedZoneId:
    Type: String
    Description: ID of the hosted zone to attach the domain name to

Resources:
  USCertificateRequestCustomResource:
    Type: Custom::RequestCertificate
    Properties:
      ServiceToken: !GetAtt USCertificateRequestLambda.Arn
      DomainName: !Sub '*.${DomainName}'
      HostedZoneId: !Ref HostedZoneId
  USCertificateRequestLambda:
    Type: AWS::Lambda::Function
    DependsOn: CertificateRequestLogGroup
    Properties:
      FunctionName: USCertificateRequestLambda
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 600
      Code:
        ZipFile: |+
          def handler(event, context):
              try:
                  print(event)
                  import traceback
                  import json
                  import time
                  import boto3
                  from botocore.exceptions import ClientError
                  import cfnresponse
          
                  # Initialize ACM and Route 53 clients
                  acm = boto3.client('acm', region_name='us-east-1')
                  route53 = boto3.client('route53')
          
                  if event['RequestType'] == 'Delete':
                      physical_resource_id = json.loads(event['PhysicalResourceId'])
                      acm.delete_certificate(CertificateArn=event['CertificateArn'])
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return

                  # Waiting for the hosted zone resource to have completed it's creation
                  HostedZoneId=event['ResourceProperties']['HostedZoneId']  # Hosted Zone ID of the domain
                  while True:
                      try:
                          response = route53.get_hosted_zone(Id=HostedZoneId)
                      except ClientError as e:
                          if e.response['Error']['Code'] == 'NoSuchHostedZone':
                              time.sleep(10.0)
                          else:
                              raise
                      else:
                          break
          
                  # Request certificate
                  response = acm.request_certificate(DomainName=event['ResourceProperties']['DomainName'], ValidationMethod='DNS')
                  certificate_arn = response['CertificateArn']
          
                  # Retrieve the domain validation options
                  describe_response = acm.describe_certificate(CertificateArn=certificate_arn)
                  domain_validation_options = describe_response['Certificate']['DomainValidationOptions']
          
                  # Find the DNS record required for certificate validation
                  exports = {'CertificateArn': certificate_arn}
                  for option in domain_validation_options:
                      if 'ResourceRecord' not in option:
                          continue;
                      resource_record = option['ResourceRecord']
          
                      # Create the DNS CNAME record in Route 53
                      route53.change_resource_record_sets(HostedZoneId=HostedZoneId, ChangeBatch={'Changes': [{'Action': 'UPSERT', 'ResourceRecordSet': {'Name': resource_record['Name'], 'Type': resource_record['Type'], 'TTL': 300, 'ResourceRecords': [{'Value': resource_record['Value']}]}}]})
                      exports['USRecordName'] = resource_record['Name']
                      break
          
                  # Send a SUCCESS response to CloudFormation
                  physical_resource_id = json.dumps(exports)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, exports, physical_resource_id)
          
              except Exception as e:
                  print(traceback.format_exc())
                  cfnresponse.send(event, context, cfnresponse.FAILED, {type(e).__name__: str(e)})
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                  - acm:RequestCertificate
                  - acm:DescribeCertificate
                  - acm:DeleteCertificate
                  - route53:ChangeResourceRecordSets
                  - route53:ListHostedZones
                  - route53:ListResourceRecordSets
                  - route53:GetHostedZone
                Resource: '*'
  CertificateRequestLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/USCertificateRequestLambda
      RetentionInDays: 30

Outputs:
  USCertificateArn:
    Description: "ARN of the US ACM Certificate (for CloudFront)"
    Value: !GetAtt USCertificateRequestCustomResource.CertificateArn