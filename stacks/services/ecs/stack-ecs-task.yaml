AWSTemplateFormatVersion: '2010-09-09'
Description: Defines a service that runs on an ECS cluster, with a load balancer in front

Parameters:
  ClusterType:
    Type: String
    Description: The type of clusters that the task should be compatible with. Might restrain the core/memory/disk space values that are valid.
    AllowedValues:
      - 'EC2'
      - 'FARGATE'
  TaskFamily:
    Type: String
    Description: The name of the task
  DockerImage:
    Type: String
    Description: The address of the Docker image to use (busybox, docker.io/library/python:3.12, public.ecr.aws/lambda/python:3.12, 717279735548.dkr.ecr.eu-west-3.amazonaws.com/sleek-simulations/webapp:latest, ...)

  EntryPoint:
    Type: String
    Description: The docker run --entrypoint argument, as a comma delimited list (example 'python,-m,package.entryoint.py'), or empty string to keep default
    Default: ''
  CpuUnits:
    Type: Number
    Description: CPU resources allocated to each docker container running the service (1024 CPU units = 1 cpu core)
    Default: '256'
  MemoryMiB:
    Type: Number
    Description: Memory resources allocated to each docker container running the service (in MiB)
    Default: '512'
  FargateDiskSpaceGiB:
    Type: Number
    Description: Disk space in GiB. Only valid for FARGATE tasks. Must be between 20 and 200.
    Default: '20'
  EnvironmentFile:
    Type: String
    Description: The s3 uri (s3://.../variables.env) of .env file containing env variables definitions (MY_ENV=VALUE). They must be read accessible from the runner role.
    Default: ''
  RunerRolePolicyArn:
    Type: String
    Description: The Arn of an AWS::IAM::ManagedPolicy object that will be used to create the role EC2 endorses. Or an empty string for essential rights only.
    Default: ''

Conditions:
  NotHasPolicy: !Equals ['', !Ref RunerRolePolicyArn]
  NotHasEnvFile: !Equals ['', !Ref EnvironmentFile]
  NotHasEntryPoint: !Equals ['', !Ref EntryPoint]
  FargateClusterType: !Equals [!Ref ClusterType, 'FARGATE']
  DefaultFargateDiskSpaceGiB: !Equals [!Ref FargateDiskSpaceGiB, 20]
  SpecifyStorage: !And
    - !Not [!Condition FargateClusterType]
    - !Not [!Condition DefaultFargateDiskSpaceGiB]

Resources:
  ExecutionRole:  # this is the role of the instance that pulls and execute the docker image
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  DefaultRunnerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-DefaultRunnerPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
  RunnerRole:  # this is the role endorsed from the docker image that runs the entrypoint
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-RunnerRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - !Ref DefaultRunnerPolicy
        - !If
          - NotHasPolicy
          - !Ref AWS::NoValue
          - !Ref RunerRolePolicyArn
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref TaskFamily
      ContainerDefinitions:
        - Name: !Ref TaskFamily
          Image: !Ref DockerImage
          EntryPoint: !If
            - NotHasEntryPoint
            - !Ref AWS::NoValue
            - !Split [',', !Ref EntryPoint]
          EnvironmentFiles: !If
            - NotHasEnvFile
            - !Ref AWS::NoValue
            - Type: s3
              Value: !Ref EnvironmentFile
          Cpu: !Ref CpuUnits
          Memory: !Ref MemoryMiB
          Essential: true
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub ${AWS::StackName}-Task
      Cpu: !Ref CpuUnits
      Memory: !Ref MemoryMiB
      EphemeralStorage: !If
        - SpecifyStorage
        - SizeInGiB: FargateDiskSpaceGiB
        - !Ref AWS::NoValue
      RequiresCompatibilities:
        - !Ref ClusterType
      NetworkMode: !If [ FargateClusterType, awsvpc, host ]
      TaskRoleArn: !Ref RunnerRole
      ExecutionRoleArn: !Ref ExecutionRole
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}
      RetentionInDays: 30

Outputs:
  TaskDefinitionArn:
    Value: !Ref TaskDefinition
  TaskFamily:
    Value: !Ref TaskFamily
  RunnerRoleArn:
    Value: !GetAtt RunnerRole.Arn