AWSTemplateFormatVersion: '2010-09-09'
Description: Defines a service that runs on an ECS cluster, with a load balancer in front

Parameters:
  DockerImageURI:
    Type: String
    Description: The URI of the ECR image to use
  VpcId:
    Type: String
    Description: ID of the VPC to start the instances in
  SubnetIds:
    Type: CommaDelimitedList
    Description: IDs of the subnets to start the instances is
  EnvironmentVariables:
    Type: CommaDelimitedList
    Description: 'The environment variables to add to the worker nodes, as a JSON string. Example: !Sub ''[{"Name": "AWS_DEFAULT_REGION", "Value": "${AWS::Region}"}, {"Name": "AWS_STACK_NAME", "Value": "${AWS::StackName}"}]'''
    Default: '[]'
  InstanceType:
    Type: String
    Description: Instance Type
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: Must be one of the valid instance specified in the stack parameters
  CpuUnits:
    Type: Number
    Description: CPU resources allocated to each docker container running the service (1024 CPU units = 1 cpu core)
    Default: '512'
  MemoryMb:
    Type: Number
    Description: Memory resources allocated to each docker container running the service (in MB)
    Default: '512'
  DiskSpace:
    Type: Number
    Description: Disk space in gB
    Default: '20'
  InitialInstanceCount:
    Type: Number
    Description: Initial number of instances to boot up at stack deployment
    Default: '1'
  MinInstanceCount:
    Type: Number
    Description: Minimum number of instances that must booted up by the scaling policy
    Default: '1'
  MaxInstanceCount:
    Type: Number
    Description: Maximum number of instances that can be booted up by the scaling policy
    Default: '3'
  InstanceScalingCooldown:
    Type: Number
    Description: Number of seconds between an upward or a downward instances scaling adjustment
    Default: '300'
  HealthCheckPath:
    Type: String
    Description: The route on which GET requests are sent to check the health of the service
    Default: /
  SSHKeyName:
    Type: String
    Description: The name of an existing EC2 KeyPair to enable SSH access to the instances (optional). Leave empty to not use a key pair.
    Default: 'default-ssh-key'

Conditions:
  HasSSHKeyName: !Not [!Equals ['', !Ref SSHKeyName]]

Resources:
  WebappLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub WebappLoadBalancer
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Type: application
  WebappTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: WebappTargetGroup
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
  WebappListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebappTargetGroup
      LoadBalancerArn: !Ref WebappLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: !ImportValue CertificateArn
  WebappListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebappTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join
                - ''
                - - www.
                  - !ImportValue DomainName
      ListenerArn: !Ref WebappListener
      Priority: 1
  WebappCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub WebappCluster
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  WebappRunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for runners
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - !If
          - HasSSHKeyName
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  WebappLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: WebappCluster
    Properties:
      ImageId: !Sub '{{resolve:ssm:/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id}}'
      InstanceType: !Ref InstanceType
      KeyName: !If
        - HasSSHKeyName
        - !Ref SSHKeyName
        - !Ref AWS::NoValue
      SecurityGroups:
        - !Ref WebappRunnerSecurityGroup
      IamInstanceProfile: !Ref WebappECSInstanceProfile
      UserData: !Sub |+
          #!/bin/bash
          echo ECS_CLUSTER=${WebappCluster} >> /etc/ecs/ecs.config
  WebappAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WebappLaunchConfiguration
      MinSize: !Ref MinInstanceCount
      MaxSize: !Ref MaxInstanceCount
      DesiredCapacity: !Ref InitialInstanceCount
      VPCZoneIdentifier: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: !Sub WebappInstance
          PropagateAtLaunch: true
  WebappCPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WebappHighCPU
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebappAutoScalingGroup
      AlarmActions:
        - !Ref WebappScaleUpPolicy
  WebappScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub WebappScaleUpPolicy
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebappAutoScalingGroup
      Cooldown: !Ref InstanceScalingCooldown
  WebappCPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WebappLowCPU
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 20
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebappAutoScalingGroup
      AlarmActions:
        - !Ref WebappScaleDownPolicy
  WebappScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebappAutoScalingGroup
      PolicyName: !Sub WebappScaleDownPolicy
      PolicyType: SimpleScaling
      ScalingAdjustment: -1
      AdjustmentType: ChangeInCapacity
      Cooldown: !Ref InstanceScalingCooldown
  WebappTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: WebappTaskFamily
      ContainerDefinitions:
        - Name: !Sub WebappTaskContainer
          Image: !Ref DockerImageURI
          Environment: !Ref EnvironmentVariables
          Cpu: !Ref CpuUnits
          Memory: !Ref MemoryMb
          Essential: true
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebappECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub WebappTaskContainer
      EphemeralStorage:
        SizeInGiB: !Ref DiskSpace
      RequiresCompatibilities:
        - EC2
      NetworkMode: host
      TaskRoleArn: !Ref WebappRunnerRole
      ExecutionRoleArn: !Ref WebappExecutionRole
  WebappService:
    Type: AWS::ECS::Service
    DependsOn: WebappListener
    Properties:
      Cluster: !Ref WebappCluster
      DesiredCount: 1
      TaskDefinition: !Ref WebappTaskDefinition
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: !Sub WebappTaskContainer
          ContainerPort: 80
          TargetGroupArn: !Ref WebappTargetGroup
  WebappECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/webapp
      RetentionInDays: 30
  WebappRunnerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub WebappEcsTaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - s3:*
                  - cognito:*
                  - dynamodb:*
                  - ecs:RunTask
                  - sns:Publish
                  - ses:SendEmail
                  - ses:SendRawEmail
                  - cloudformation:ListStacks
                  - cloudformation:DescribeStacks
                Resource: '*'
  WebappExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:UpdateContainerInstancesState
                  - ecs:Submit*
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:DescribeTags
                  - ec2:DescribeInstances
                  - elasticloadbalancing:*
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
  WebappECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WebappExecutionRole
  WebappCNAMERecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join
        - ''
        - - !ImportValue DomainName
          - .
      Name: !Join
        - ''
        - - www.
          - !ImportValue DomainName
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - !GetAtt WebappLoadBalancer.DNSName