{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Defines the webapp resources",
    "Parameters": {
        "DockerImageURI":
        {
            "Type": "String",
            "Default": "717279735548.dkr.ecr.eu-west-3.amazonaws.com/sleek-simulations/webapp:latest",
            "Description": "The URI of the ECR image to use"
        },
        "InstanceType":
        {
            "Type": "String",
            "Description": "Instance Type",
            "Default": "t2.micro",
            "AllowedValues": ["t2.micro"],
            "ConstraintDescription": "Must be one of the valid instance specified in the stack parameters"
        },
        "SSHKeyName":
        {
            "Type": "String",
            "Description": "The name of an existing EC2 KeyPair to enable SSH access to the instances (optional). Leave empty to not use a key pair.",
            "Default": "benoit-favier-desktop"
        }
    },
    "Resources" :
    {
        "WebappRunnerSecurityGroup":
        {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties":
            {
                "GroupDescription": "Security group for runners",
                "VpcId": {"Fn::ImportValue": "PublicVpcId"},
                "SecurityGroupIngress":
                [
                    {
                        "Fn::If":
                        [
                            "HasSSHKeyName",
                            {
                                "IpProtocol": "tcp",
                                "FromPort": 22,
                                "ToPort": 22,
                                "CidrIp": "0.0.0.0/0"
                            },
                            {"Ref": "AWS::NoValue"}
                        ]
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress":
                [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "WebappEC2LogGroup":
        {
            "Type": "AWS::Logs::LogGroup",
            "Properties":
            {
                "LogGroupName": {"Fn::Sub": "/ec2/webapp"},
                "RetentionInDays": 30
            }
        },
        "WebappRunnerRole":
        {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {"Service": "ecs-tasks.amazonaws.com"},
                            "Action": "sts:AssumeRole"
                        },
                        {
                            "Effect": "Allow",
                            "Principal": {"Service": "ec2.amazonaws.com"},
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {"Fn::Sub": "WebappEcsTaskExecutionPolicy"},
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "ecr:GetAuthorizationToken",
                                        "ecr:BatchCheckLayerAvailability",
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:BatchGetImage",
                                        "s3:*",
                                        "cognito:*",
                                        "dynamodb:*",
                                        "ecs:RunTask",
                                        "sns:Publish",
                                        "ses:SendEmail",
                                        "ses:SendRawEmail",
                                        "cloudformation:ListStacks",
                                        "cloudformation:DescribeStacks"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "WebappEC2InstanceProfile":
        {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties":
            {
                "Roles": [{"Ref": "WebappRunnerRole"}]
            }
        },
        "WebappEC2Instance":
        {
            "Type": "AWS::EC2::Instance",
            "Properties":
            {
                "InstanceType": {"Ref": "InstanceType"},
                "ImageId": {"Fn::Sub": "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"},
                "SubnetId": {"Fn::ImportValue": "PublicSubnetAId" },
                "SecurityGroupIds": [{"Ref": "WebappRunnerSecurityGroup"}],
                "IamInstanceProfile": {"Ref": "WebappEC2InstanceProfile"},
                "KeyName": {"Fn::If": ["HasSSHKeyName", {"Ref": "SSHKeyName"}, {"Ref": "AWS::NoValue"}]},
                "UserData":
                {
                    "Fn::Base64":
                    {
                        "Fn::Join":
                        [
                            "\n",
                            [
                                "#!/bin/bash",
                                "yum update -y",

                                "# Install CloudWatch Agent",
                                "yum install amazon-cloudwatch-agent -y",

                                "# Install and start Docker",
                                "amazon-linux-extras install docker -y",
                                "service docker start",
                                "usermod -a -G docker ec2-user",

                                "# Pull and run Docker container",
                                {"Fn::Sub": "aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${DockerImageURI}"},
                                {"Fn::Sub": "docker pull ${DockerImageURI}"},
                                "docker run -d \\",
                                {"Fn::Sub": "-e AWS_DEFAULT_REGION=${AWS::Region} \\"},
                                {"Fn::Join": ["", ["-e COGNITO_USER_POOL_ID", {"Fn::ImportValue": "CognitoUserPoolId"}, " \\"]]},
                                {"Fn::Join": ["", ["-e COGNITO_USER_POOL_CLIENT_ID", {"Fn::ImportValue": "CognitoUserPoolClientId"}, " \\"]]},
                                {"Fn::Join": ["", ["-e DOMAIN_NAME", {"Fn::ImportValue": "DomainName"}, " \\"]]},
                                "--log-driver=awslogs \\",
                                {"Fn::Sub": "--log-opt awslogs-region=${AWS::Region} \\"},
                                {"Fn::Sub": "--log-opt awslogs-group=/ec2/webapp \\"},
                                {"Fn::Sub": "--log-opt awslogs-stream=docker-logs-$(date +%s) \\"},
                                {"Fn::Sub": "-p 80:80 ${DockerImageURI}"}
                            ]
                        ]
                    }
                },
                "Tags":
                [
                    {
                        "Key": "Name",
                        "Value": {"Fn::Sub": "WebappInstance"}
                    }
                ]
            }
        },
        "WebappCloudFrontOriginRequestPolicy": {
            "Type": "AWS::CloudFront::OriginRequestPolicy",
            "Properties": {
                "OriginRequestPolicyConfig": {
                    "Name": "WebappCloudFrontOriginRequestPolicy",
                    "CookiesConfig": {"CookieBehavior": "all"},
                    "HeadersConfig": {"HeaderBehavior": "allViewer"},
                    "QueryStringsConfig": {"QueryStringBehavior": "all"}
                }
            }
        },
        "WebappCloudFrontCachePolicy": {
            "Type": "AWS::CloudFront::CachePolicy",
            "Properties": {
                "CachePolicyConfig": {
                    "Name": "WebappCloudFrontCachePolicy",
                    "DefaultTTL": 3600,
                    "MaxTTL": 86400,
                    "MinTTL": 0,
                    "ParametersInCacheKeyAndForwardedToOrigin": {
                        "CookiesConfig": {"CookieBehavior": "none"},
                        "EnableAcceptEncodingBrotli": true,
                        "EnableAcceptEncodingGzip": true,
                        "HeadersConfig": {"HeaderBehavior": "none"},
                        "QueryStringsConfig": {"QueryStringBehavior": "none"}
                    }
                }
            }
        },
        "WebappCloudFrontDistribution":
        {
            "Type": "AWS::CloudFront::Distribution",
            "Properties":
            {
                "DistributionConfig":
                {
                    "Enabled": true,
                    "Origins":
                    [
                        {
                            "Id": "EC2Origin",
                            "DomainName": {"Fn::GetAtt": ["WebappEC2Instance", "PublicDnsName"]},
                            "CustomOriginConfig":
                            {
                                "OriginProtocolPolicy": "http-only",
                                "HTTPPort": 80
                            }
                        }
                    ],
                    "DefaultCacheBehavior":
                    {
                        "TargetOriginId": "EC2Origin",
                        "ViewerProtocolPolicy": "redirect-to-https",
                        "AllowedMethods": ["GET", "HEAD", "OPTIONS", "PUT", "POST", "PATCH", "DELETE"],
                        "CachedMethods": ["GET", "HEAD", "OPTIONS"],
                        "CachePolicyId": {"Ref": "WebappCloudFrontCachePolicy"},
                        "OriginRequestPolicyId": {"Ref": "WebappCloudFrontOriginRequestPolicy"}
                    },
                    "ViewerCertificate":
                    {
                        "AcmCertificateArn": {"Fn::ImportValue": "USCertificateArn"},
                        "SslSupportMethod": "sni-only",
                        "MinimumProtocolVersion": "TLSv1.2_2021"
                    },
                    "Aliases": [{"Fn::Join": ["", ["www.", {"Fn::ImportValue": "DomainName"}]]}],
                    "HttpVersion": "http2",
                    "PriceClass": "PriceClass_100"
                }
            }
        },
        "WebappCNAMERecord": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneName": {"Fn::Join": ["", [{"Fn::ImportValue": "DomainName"}, "."]]},
                "Name": {"Fn::Join": ["", ["www.", {"Fn::ImportValue": "DomainName"}]]},
                "Type": "CNAME",
                "TTL": "300",
                "ResourceRecords": [{"Fn::GetAtt": ["WebappCloudFrontDistribution", "DomainName"]}]
            }
        }
    },
    "Conditions":
    {
        "HasSSHKeyName":
        {
            "Fn::Not": [{"Fn::Equals": ["", {"Ref": "SSHKeyName"}]}]
        }
    }
}