AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create an EKS cluster

Parameters:
  NodeInstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type for the worker nodes
  NodeDiskSize:
    Type: Number
    Default: '20'
    Description: The disk space of the nodes in gB
  InitialNodeCount:
    Type: Number
    Default: '1'
    Description: Desired number of worker nodes
  MinNodeCount:
    Type: Number
    Default: '1'
    Description: Minimum number of worker nodes
  MaxNodeCount:
    Type: Number
    Default: '5'
    Description: Maximum number of worker nodes
  SSHKeyName:
    Type: String
    Description: The name of an existing EC2 KeyPair to enable SSH access to the instances (optional). Leave empty to not use a key pair.
    Default: benoit-favier-desktop

Conditions:
  HasSSHKeyName: !Not
    - !Equals
      - !Ref SSHKeyName
      - ''

Resources:
  NodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Sub
          - '{{resolve:ssm:/aws/service/eks/optimized-ami/${KubernetesVersion}/amazon-linux-2/recommended/image_id}}'
          - KubernetesVersion: !ImportValue KubernetesVersion
        SecurityGroupIds:
          - !ImportValue KubernetesNodeSecurityGroup
        KeyName: !If
          - HasSSHKeyName
          - !Ref SSHKeyName
          - !Ref AWS::NoValue
        InstanceType: !Ref NodeInstanceType
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref NodeDiskSize
              VolumeType: gp2
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${AWS::StackName}
        UserData: !Sub |+
            - #!/bin/bash
              set -ex
              /etc/eks/bootstrap.sh ${ClusterName} --use-max-pods false
            - ClusterName: !ImportValue KubernetesCluster
  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      NodegroupName: !Sub ${AWS::StackName}
      ClusterName: !ImportValue KubernetesCluster
      NodeRole: !ImportValue KubernetesNodeRoleArn
      Subnets:
        - !ImportValue PublicSubnetAId
        - !ImportValue PublicSubnetBId
        - !ImportValue PublicSubnetCId
      ScalingConfig:
        MinSize: !Ref MinNodeCount
        MaxSize: !Ref MaxNodeCount
        DesiredSize: !Ref InitialNodeCount
      LaunchTemplate:
        Id: !Ref NodeLaunchTemplate
        Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber
      Tags:
        k8s.io/cluster-autoscaler/enabled: 'true'

Outputs:
  NodeGroup:
    Value: !Ref EKSNodeGroup