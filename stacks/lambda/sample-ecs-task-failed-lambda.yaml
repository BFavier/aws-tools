AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda scheduled every hour to clean up DynamoDB using resource API

Parameters:
  LambdaName:
    Type: String
    Default: DynamoDBCleanupFunction
    Description: Name of the lambda to create
  ECSClusterName:
    Type: String
    Default: MyECSCluster
    Description: The name of the ECS cluster to monitor
  BackendFailureWebhook:
    Type: String
    Default: "/"
    Description: The HTTP URL to notify when a task fails


Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ECSFailuresLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaName}"
      RetentionInDays: 30

  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaLogGroup
    Properties:
      FunctionName: !Ref LambdaName
      Handler: index.handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Environment:
        Variables:
          BACKEND_URL: !Ref BackendFailureWebhook
      Code:
        ZipFile: |
          import os
          import json
          import urllib.request

          def handler(event, context):
              try:
                  print(event)
                  detail = event.get("detail", {})
                  containers = detail.get("containers", [])
                  exit_reasons = [c["reason"] for c in containers if c["exitCode"] != 0]
                  trace = "\\n".join(exit_reasons)
                  fargate_arn = detail.get("taskArn", "unknown")
                  payload = {
                      "error_trace": trace,
                      "fargate_arn": fargate_arn
                  }
                  req = urllib.request.Request(
                      url=os.environ["BACKEND_URL"],
                      data=json.dumps(payload).encode("utf-8"),
                      headers={"Content-Type": "application/json"},
                      method="POST"
                  )
                  with urllib.request.urlopen(req) as response:
                      status = response.getcode()
                      print(f"Notification sent with status code {status}")

              except Exception as e:
                  print("Failed to notify backend:", str(e))

  ECSFailureRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ECSFailedTaskRule
      Description: Triggers on failed ECS tasks
      EventPattern:
        source:
          - "aws.ecs"
        detail-type:
          - "ECS Task State Change"
        detail:
          clusterArn:
            - !Sub
              - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${FargateClusterName}"
              - FargateClusterName: !ImportValue FargateClusterName
          lastStatus:
            - "STOPPED"
          containers:
            exitCode:
              anything-but: [0]
      Targets:
        - Arn: !GetAtt ECSFailureHandlerLambda.Arn
          Id: LambdaFunctionTarget

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ECSFailureRule.Arn


Outputs:
  LambdaArn:
    Value: !GetAtt LambdaFunction.Arn
  LambdaName:
    Value: !Ref LambdaFunction